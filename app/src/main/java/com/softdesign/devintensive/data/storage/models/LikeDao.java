package com.softdesign.devintensive.data.storage.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIKES".
*/
public class LikeDao extends AbstractDao<Like, Long> {

    public static final String TABLENAME = "LIKES";

    /**
     * Properties of entity Like.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectRemoteId = new Property(1, String.class, "objectRemoteId", false, "OBJECT_REMOTE_ID");
        public final static Property SubjectRemoteId = new Property(2, String.class, "subjectRemoteId", false, "SUBJECT_REMOTE_ID");
    };

    private DaoSession daoSession;

    private Query<Like> user_LikesByQuery;

    public LikeDao(DaoConfig config) {
        super(config);
    }
    
    public LikeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIKES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_REMOTE_ID\" TEXT NOT NULL ," + // 1: objectRemoteId
                "\"SUBJECT_REMOTE_ID\" TEXT NOT NULL );"); // 2: subjectRemoteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIKES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Like entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectRemoteId());
        stmt.bindString(3, entity.getSubjectRemoteId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Like entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObjectRemoteId());
        stmt.bindString(3, entity.getSubjectRemoteId());
    }

    @Override
    protected final void attachEntity(Like entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Like readEntity(Cursor cursor, int offset) {
        Like entity = new Like( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // objectRemoteId
            cursor.getString(offset + 2) // subjectRemoteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Like entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectRemoteId(cursor.getString(offset + 1));
        entity.setSubjectRemoteId(cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Like entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Like entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "likesBy" to-many relationship of User. */
    public List<Like> _queryUser_LikesBy(String objectRemoteId) {
        synchronized (this) {
            if (user_LikesByQuery == null) {
                QueryBuilder<Like> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ObjectRemoteId.eq(null));
                user_LikesByQuery = queryBuilder.build();
            }
        }
        Query<Like> query = user_LikesByQuery.forCurrentThread();
        query.setParameter(0, objectRemoteId);
        return query.list();
    }

}
